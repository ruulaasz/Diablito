//////////////////////////////////////////////////////////////////////////
///																		//
// @file   omVector3D.h													//	
// @Author Raul Portillo (ruulaasz_@hotmail.com)						//
// @date   2015/17/10													//
// @brief  Class for vector3D type structure							//
// @bug	   No known bugs.												//
//																		//
//////////////////////////////////////////////////////////////////////////
#pragma once

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Declaracion de la clase omVector3D																					//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace OmicronSDK
{
	class omMatrix3D;
	class omVector4D;

	class omVector3D
	{
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Declaracion de contructores y destructor																				//
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public:
		explicit omVector3D(float _X = 0.f, float _Y = 0.f, float _Z = 0.f);
		omVector3D(omVector3D& _vector);
		omVector3D(omVector4D& _vector);
		~omVector3D();

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Declaracion de variables miembro de la clase																			//
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		float X;	//<Elemento X del vector>//
		float Y;	//<Elemento Y del vector>//
		float Z;	//<Elemento Z del vector>//

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Sobrecarga de Operadores																								//
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		omVector3D operator- (const omVector3D& _vector);
		omVector3D operator+ (const omVector3D& _vector);
		omVector3D operator* (const omVector3D& _vector);
		omVector3D& operator+= (const omVector3D& _vector);
		omVector3D& operator-= (const omVector3D& _vector);

		void operator*=(const omMatrix3D& _matrix);
		omVector3D operator* (const omMatrix3D& _matrix);

		void operator/= (const float& _value);

		omVector3D& operator=(const omVector4D& _vector);

		bool operator== (const omVector3D& _vector);
		bool operator!= (const omVector3D& _vector);

		omVector3D operator* (const float& _value);
		void operator*= (const float& _value);
		float& operator[](const int idx);
	};

}
