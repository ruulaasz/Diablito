//////////////////////////////////////////////////////////////////////////
///																		//
// @file   omFrustum.h													//	
// @Author Raul Portillo (ruulaasz_@hotmail.com)						//
// @date   2015/22/09													//
// @brief  Class for degree type data									//
// @bug	   No known bugs.												//
//																		//
//////////////////////////////////////////////////////////////////////////
#pragma once

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Definicion de la clase omFrustum																						//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace OmicronSDK
{
	class omPlane;
	class omAABB;
	class omMatrix4D;
	class omDegrees;
	class omRadians;

	enum
	{
		TOP = 0,
		BOTTOM,
		LEFT,
		RIGHT,
		NEARP,
		FARP
	};

	class omFrustum
	{
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Declaracion de contructores y destructor																				//
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	public:
		omFrustum();
		~omFrustum();

		enum
		{
			OUTSIDE, INTERSECT, INSIDE
		};

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Declaracion de variables miembro de la clase																			//
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		omPlane* m_Planes;

		//esquinas de los planos near y far
		float nw, nh, fw, fh;
		float nearD, farD, ratio, tang;
		omDegrees* angle;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Declaracion de las funciones de la clase																				//
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//cada que la perspectiva cambie o la ventana sea rezize se debe llamar
		void setCamInternals(omDegrees angle, float ratio, float nearD, float farD);
		void setCamInternals(omRadians angle, float ratio, float nearD, float farD);

		//cuando la camara se mueve se debe llamar
		void setCamDef(omVector4D &_Position, omVector4D &_Look, omVector4D &_Up);

		/*int pointInFrustum(omVector3D &p);
		int sphereInFrustum(omVector3D &p, float radio);
		int boxInFrustum(omAABB &b);*/
	};
}
